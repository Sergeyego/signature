import { IPdfNumberParams, PdfNumber } from "./number";

export interface IPdfFlagsParams<T> extends IPdfNumberParams {
  flags?: Array<keyof T>;
}

export class PdfFlags<T> extends PdfNumber {
  protected type: T;

  public constructor(
    type: T,
    options?: IPdfFlagsParams<T>,
  ) {
    super(options);
    this.type = type;

    if (options && options.flags) {
      this.set(...options.flags);
    }
  }

  /**
   * Проверяет включен ли флаг.
   * @param v
   * @returns
   */
  public has(v: keyof T): boolean {
    const f = this.type[v] as unknown as number;

    return (this.value & f) === f;
  }

  /**
   * Включает указанный флаг.
   * @param v
   */
  public set(...v: Array<keyof T>): void {
    for (const i of v) {
      this.value |= this.type[i] as number;
    }
  }

  /**
   * Возвращает массив всех включенных флагов.
   * @returns
   */
  public get(): Array<keyof T> {
    const res = [];

    for (const key in this.type) {
      if (typeof key === "string" && this.has(key)) {
        res.push(key);
      }
    }

    return res;
  }

  /**
   * Выключает указанный флаг.
   * @param v
   */
  public unset(...v: Array<keyof T>): void {
    for (const i of v) {
      this.value &= ~(this.type[i] as number);
    }
  }
}
