import type { Copier } from "../copier";
import type { Parser } from "../parser";
import type { ObjectStream, PdfArray, PdfDictionary, PdfIndirectObject } from "../syntax";
import type { Writer } from "../writer";
import type { PdfView } from "./buffer";

export enum RegistryTypes {
  PdfView,
  ObjectStream,
  Writer,
  PdfIndirectObject,
  Parser,
  Copier,
  PdfDictionary,
  PdfArray,
}

/**
 * Класс предназначен для обхода проблемы с циркулярными зависимостями.
 * Для регистрации класса необходимо добавить метод get, расширить enum RegistryTypes
 * и зарегистрировать класс в файле register.
 */
export abstract class Registry {
  public static items: Record<number, unknown> = {};

  public static get(key: RegistryTypes.PdfIndirectObject): typeof PdfIndirectObject;
  public static get(key: RegistryTypes.Parser): typeof Parser;
  public static get(key: RegistryTypes.Writer): typeof Writer;
  public static get(key: RegistryTypes.Copier): typeof Copier;
  public static get(key: RegistryTypes.PdfView): typeof PdfView;
  public static get(key: RegistryTypes.ObjectStream): typeof ObjectStream;
  public static get(key: RegistryTypes.PdfDictionary): typeof PdfDictionary;
  public static get(key: RegistryTypes.PdfArray): typeof PdfArray;
  public static get(key: RegistryTypes): unknown {
    return this.items[key];
  }

  public static set(key: RegistryTypes, value: unknown): void {
    this.items[key] = value;
  }
}
