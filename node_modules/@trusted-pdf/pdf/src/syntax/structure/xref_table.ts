import { Document } from "../../document";
import { PdfView } from "../../internal";
import { PdfIndirectObject, RawData } from "../objects";
import { Trailer } from "./trailer";
import { XRef } from "./xref";

export interface XRefPrevParams {
  xref: XRefTable;
}
export interface XRefTrailerParams {
  trailer?: Trailer;
  doc: Document;
}

type XRefTableParams = XRefPrevParams | XRefTrailerParams;

/**
 * ```
 * ... objects ...
 * xref
 * 4 2
 * 0000005208 00000 n
 * 0000005143 00000 n
 * 8 1
 * 0000000807 00000 n
 * trailer
 * <<
 *   /Root ...
 * >>
 * startxref
 * Byte_offset_of_last_cross-reference_section
 * %%EOF
 * ```
 */
export class XRefTable implements XRef {
  #trailer?: Trailer;
  #doc?: Document;

  public prev?: XRef | undefined;
  public objects: Map<number, PdfIndirectObject> = new Map();
  public raw: PdfView = RawData.EMPTY_VIEW;

  public get Size(): number {
    return this.trailer.Size;
  }

  public set Size(v: number) {
    this.trailer.Size = v;
  }

  public get trailer(): Trailer {
    if (this.#trailer) {
      return this.#trailer;
    }

    throw new Error("XRefTable не содержит trailer");
  }

  public set trailer(v: Trailer) {
    this.#trailer = v;
  }

  public get doc(): Document {
    if (this.#doc) {
      return this.#doc;
    }

    throw new Error("XRefTable не содержит document");
  }

  public set doc(v: Document) {
    this.#doc = v;
  }

  public isEmptyRaw(): boolean {
    throw new Error("Метод не реализован.");
  }

  public push(...object: PdfIndirectObject[]): void {
    for (const obj of object) {
      obj.xref = this;
      this.objects.set(obj.id, obj);
    }
  }

  public findIndirectObject(id: number): PdfIndirectObject | null {
    let res = this.objects.get(id) ?? null;
    if (!res && this.prev) {
      res = this.prev.findIndirectObject(id);
    }

    return res;
  }

  public getIndirectObject(id: number): PdfIndirectObject {
    const obj = this.findIndirectObject(id);
    if (!obj) {
      throw new Error("Элемент не найден");
    }

    return obj;
  }

  public static createByParams(params: XRefTableParams): XRefTable {
    const xref = new XRefTable();

    if ("doc" in params) {
      xref.doc = params.doc;

      try {
        params.doc.xref;
      } catch (error) {
        params.doc.xref = xref;
      }

      // создание из trailer.
      xref.trailer = params.trailer || Trailer.create(xref); // TODO if params => reset raw and prev.
    } else if ("xref" in params) {
      // TODO добавить копирование.

      // создание из предыдущего xref.
      xref.trailer = params.xref.trailer; // TODO add clone ?
      xref.doc = params.xref.doc;
    } else {
      throw new Error("XRefTable: Неизвестные параметры");
    }

    return xref;
  }
}
