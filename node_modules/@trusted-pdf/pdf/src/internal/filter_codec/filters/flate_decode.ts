import * as pako from "pako";

import type { PdfDictionary } from "../../../syntax";
import { Names } from "../../../syntax/names";
import { FilterName, IFilter } from "./filter";
import { Predictor } from "./predictor";

export class FlateDecode implements IFilter {
  public readonly name: FilterName = Names.FlateDecode;

  public encode(data: Uint8Array, params: PdfDictionary | null = null): Uint8Array {
    let deflatedData;

    try {
      deflatedData = pako.deflate(data);
    } catch (e) {
      throw new Error("FlateDecode.encode(): ошибка pako.deflate()");
    }

    if (params) {
      deflatedData = Predictor.encode(deflatedData, params);
    }

    return deflatedData;
  }

  public decode(data: Uint8Array, params: PdfDictionary | null = null): Uint8Array {
    let inflatedData;

    try {
      inflatedData = pako.inflate(data);
    } catch (e) {
      throw new Error("FlateDecode.decode(): ошибка pako.inflate(), вероятно некорректный набор байт");
    }

    if (params) {
      inflatedData = Predictor.decode(inflatedData, params);
    }

    return inflatedData;
  }
}
