import { Document } from "./document";
import { PdfArray } from "./syntax";

type WEntry = number | number[];

export class CIDFontWidthsConverter {
  /**
   * Конвертирует W-массив в одномерный массив
   * @param data - W-массив.
   * @returns Одномерный массив.
   */
  public static flatten(data: WEntry[]): number[] {
    const result: number[] = [];
    for (let i = 0; i < data.length; i++) {
      const first = data[i];
      const last = data[i + 1];
      const w = data[i + 2];

      if (typeof first === "number" && Array.isArray(last)) {
        // Формат `C [W1 W2… Wn]`
        for (const w of last) {
          result.push(w);
        }
        i++;
      } else if (typeof first === "number" && typeof last === "number" && typeof w === "number") {
        // Формат `C1 C2 W`
        for (let j = first; j <= last; j++) {
          result.push(w);
        }
        i += 2;
      } else {
        // Неизвестный формат
        throw new Error(`Неизвестный формат W-массива в позиции ${i}. Должен быть один из форматов: C [W1 W2… Wn] или C1 C2 W`);
      }
    }

    return result;
  }

  /**
   * Конвертирует одномерный массив в W-массив
   * @param data - Одномерный массив.
   * @returns W-массив.
   */
  public static expand(data: number[]): WEntry[] {
    const result: WEntry[] = [];
    let i = 0;

    while (i < data.length) {
      const c1 = i;
      let w = data[i];
      let c2 = c1;

      // Поиск количества последовательных CID с одинаковой шириной
      while (i + 1 < data.length && data[i + 1] === w) {
        c2++;
        i++;
      }

      // Если индексы CID совпадают, то это символы с разными ширинами
      if (c1 === c2) {
        const widths: number[] = [w];

        // Поиск последовательности CID с разными ширинами
        while (i + 1 < data.length && data[i + 1] !== w && data[i + 1] !== data[i + 2]) {
          i++;
          w = data[i];
          widths.push(w);
        }

        // Добавляем в результат в формате `C [W1 W2… Wn]`
        result.push(c1, widths);
      } else {
        // Добавляем в результат в формате `C1 C2 W`
        result.push(c1, c2, w);
      }

      i++;
    }

    return result;
  }

  /**
   * Конвертирует W-массив в `PdfArray`
   * @param doc - Документ.
   * @param data - W-массив.
   * @returns `PdfArray`.
   */
  public static toPdfArray(doc: Document, data: WEntry[]): PdfArray {
    const array = doc.createArray();
    for (const entry of data) {
      if (Array.isArray(entry)) {
        array.push(this.toPdfArray(doc, entry));
      } else {
        array.push(doc.createNumber(Math.round(entry)));
      }
    }

    return array;
  }
}
