import * as assert from "node:assert";
import * as fs from "node:fs";
import { Document, Names, PdfDictionary, XRefType } from "./index";

function readFile(path: string): Uint8Array {
  if (!fs.existsSync(path)) {
    throw Error("File not found");
  }

  return fs.readFileSync(path);
}

describe("Copier", () => {
  describe("copy()", () => {
    it("copy XRefTable document to new Document", async () => {
      const buf = readFile(`${__dirname}/../testdata/xref_table.pdf`);
      const doc = new Document();
      doc.read(buf);

      const respCopy = await doc.copy();
      respCopy.doc.save();

      const res = respCopy.doc.xref.getIndirectObject(20).value;
      respCopy.doc.xref.trailer.Root.get(Names.Metadata, PdfDictionary);
      assert.ok(res);
    });

    it("copy XRefStream document to new Document", async () => {
      const buf = readFile(`${__dirname}/../testdata/xref_stream.pdf`);
      const doc = new Document();
      doc.read(buf);

      const respCopy = await doc.copy();
      respCopy.doc.save();

      const res = respCopy.doc.xref.getIndirectObject(20).value;
      respCopy.doc.xref.trailer.Root.get(Names.Metadata, PdfDictionary);
      assert.ok(res);
    });

    it("copy document to new Document with XRefTable type", async () => {
      const buf = readFile(`${__dirname}/../testdata/xref_stream.pdf`);
      const doc = new Document();
      doc.read(buf);

      const respCopy = await doc.copy({ typeXRef: XRefType.XRefTable });
      respCopy.doc.save();

      // fs.writeFileSync(`${__dirname}/../testdata/temp.pdf`, newDoc.buffer.raw);

      const res = respCopy.doc.xref.getIndirectObject(20).value;
      respCopy.doc.xref.trailer.Root.get(Names.Metadata, PdfDictionary);
      assert.ok(res);
    });
  });
});
