import * as assert from "node:assert";
import * as fs from "node:fs";
import { Filter, FilterCodec } from "./filter_codec";
import { FilterName } from "./filters";
import { Names } from "../../syntax";

const DIR = `${__dirname}/../../../testdata/filters`;
const FLATE_DIR = DIR + "/flate";
const ASCII85_DIR = DIR + "/ascii85";

describe("FilterCodec", function () {
  describe("encode()", function () {
    describe("single filters", function () {
      const vectors: {
        title: string,
        filter: FilterName,
        dir: string,
        dataFileName: string,
        expectedFileName: string,
      }[] = [
          {
            title: "flate",
            filter: Names.FlateDecode,
            dir: FLATE_DIR,
            dataFileName: "2.decoded",
            expectedFileName: "2.encoded",
          },
          {
            title: "ascii85",
            filter: Names.ASCII85Decode,
            dir: ASCII85_DIR,
            dataFileName: "1.decoded",
            expectedFileName: "1.encoded",
          },
          {
            title: "dct (data stays the same)",
            filter: Names.DCTDecode,
            dir: FLATE_DIR,
            dataFileName: "2.decoded",
            expectedFileName: "2.decoded",
          },
        ];

      vectors.forEach((vector) => {
        it(vector.title, function () {
          const data = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.dataFileName}`));
          const expected = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.expectedFileName}`));

          const result = FilterCodec.encode(data, { name: vector.filter });

          assert.deepStrictEqual(result, expected);
        });
      });
    });

    describe("array of filters", function () {
      const vectors: {
        title: string,
        dir: string,
        filters: Filter[],
        dataFileName: string,
        expectedFileName: string,
      }[] = [
          {
            title: "FlateDecode and DCTDecode",
            dir: FLATE_DIR,
            dataFileName: "2.decoded",
            expectedFileName: "2.encoded",
            filters: [{ name: Names.FlateDecode }, { name: Names.DCTDecode }],
          },
          {
            title: "ASCII85Decode and FlateDecode",
            dir: DIR,
            dataFileName: "lorem100.txt",
            expectedFileName: "lorem100flate_ascii85.encoded",
            filters: [{ name: Names.ASCII85Decode }, { name: Names.FlateDecode }],
          },
        ];

      vectors.forEach((vector) => {
        it(vector.title, function () {
          const data = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.dataFileName}`));
          const expected = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.expectedFileName}`));

          const result = FilterCodec.encode(data, ...vector.filters);

          assert.deepStrictEqual(result, expected);
        });
      });
    });

    it("no filters", function () {
      const expected = new Uint8Array(Buffer.from("Hello"));
      const actual = FilterCodec.encode(expected);

      assert.deepStrictEqual(actual, expected);
    });
  });

  describe("decode()", function () {
    describe("single filters", function () {
      const vectors: {
        title: string,
        filter: FilterName,
        dir: string,
        dataFileName: string,
        expectedFileName: string,
      }[] = [
          {
            title: "flate",
            filter: Names.FlateDecode,
            dir: FLATE_DIR,
            dataFileName: "2.encoded",
            expectedFileName: "2.decoded",
          },
          {
            title: "ascii85",
            filter: Names.ASCII85Decode,
            dir: ASCII85_DIR,
            dataFileName: "1.encoded",
            expectedFileName: "1.decoded",
          },
          {
            title: "dct (data stays the same)",
            filter: Names.DCTDecode,
            dir: FLATE_DIR,
            dataFileName: "2.decoded",
            expectedFileName: "2.decoded",
          },
        ];

      vectors.forEach((vector) => {
        it(vector.title, function () {
          const data = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.dataFileName}`));
          const expected = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.expectedFileName}`));

          const result = FilterCodec.decode(data, { name: vector.filter });

          assert.deepStrictEqual(result, expected);
        });
      });
    });

    describe("array of filters", function () {
      const vectors: {
        title: string,
        dir: string,
        filters: Filter[],
        dataFileName: string,
        expectedFileName: string,
      }[] = [
          {
            title: "FlateDecode and DCTDecode",
            dir: FLATE_DIR,
            dataFileName: "2.encoded",
            expectedFileName: "2.decoded",
            filters: [{ name: Names.FlateDecode }, { name: Names.DCTDecode }],
          },
          {
            title: "ASCII85Decode and FlateDecode",
            dir: DIR,
            dataFileName: "lorem100flate_ascii85.encoded",
            expectedFileName: "lorem100.txt",
            filters: [{ name: Names.ASCII85Decode }, { name: Names.FlateDecode }],
          },
        ];

      vectors.forEach((vector) => {
        it(vector.title, function () {
          const data = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.dataFileName}`));
          const expected = new Uint8Array(fs.readFileSync(`${vector.dir}/${vector.expectedFileName}`));

          const result = FilterCodec.decode(data, ...vector.filters);

          assert.deepStrictEqual(result, expected);
        });
      });
    });

    it("no filters error", function () {
      const expected = new Uint8Array(Buffer.from("Hello"));
      const actual = FilterCodec.decode(expected);

      assert.deepStrictEqual(actual, expected);
    });
  });
});
