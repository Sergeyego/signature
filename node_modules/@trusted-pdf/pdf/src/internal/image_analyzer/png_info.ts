import pngLib, { type Image as UImage } from "@pdf-lib/upng";
import { IBaseImage, IBaseInfo, ImageTypes } from "./analyzer";

declare module "@pdf-lib/upng" {
  export default class UPNG {
    public static decode(data: Uint8Array): UImage;
    public static toRGBA8(upng: UImage): Uint8Array[];
  }
}

/**
 * Данные PNG изображения.
 */
export interface IImagePngInfo extends IBaseImage {
  /**
   * Тип изображения: PNG.
   */
  type: ImageTypes.PNG;
  /**
   * Дополнительная информация о PNG.
   */
  info: IPngInfo;
}

/**
 * Дополнительная информация о PNG.
 */
export interface IPngInfo extends IBaseInfo {
  /**
   * Альфа-канал для PNG изображения.
   */
  alphaChannel?: Uint8Array;
}

export abstract class PngInfo {
  public static getInfo(image: Uint8Array): IImagePngInfo {
    const upng = pngLib.decode(image);
    const frames = pngLib.toRGBA8(upng);

    if (frames.length > 1) {
      throw new Error("Изображение содержит несколько фреймов");
    }

    const frame = new Uint8Array(frames[0]);
    const { rgbChannel, alphaChannel } = this.splitAlphaChannel(frame);

    const hasAlphaValues = alphaChannel.some((a) => a < 255);

    return {
      type: ImageTypes.PNG,
      buf: rgbChannel,
      info: {
        alphaChannel: hasAlphaValues ? alphaChannel : undefined,
        bitsPerComponent: 8,
        colorSpace: "DeviceRGB",
        height: upng.height,
        width: upng.width,
      }
    };
  }

  private static splitAlphaChannel(rgbaChannel: Uint8Array) {
    const pixelCount = Math.floor(rgbaChannel.length / 4);

    const rgbChannel = new Uint8Array(pixelCount * 3);
    const alphaChannel = new Uint8Array(pixelCount * 1);

    let rgbaOffset = 0;
    let rgbOffset = 0;
    let alphaOffset = 0;

    while (rgbaOffset < rgbaChannel.length) {
      rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];
      rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];
      rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];
      alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];
    }

    return { rgbChannel, alphaChannel };
  }
}
