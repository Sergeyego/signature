/*!
 *                                  Apache License
 *                            Version 2.0, January 2004
 *                         http://www.apache.org/licenses/
 * 
 *    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * 
 *    1. Definitions.
 * 
 *       "License" shall mean the terms and conditions for use, reproduction,
 *       and distribution as defined by Sections 1 through 9 of this document.
 * 
 *       "Licensor" shall mean the copyright owner or entity authorized by
 *       the copyright owner that is granting the License.
 * 
 *       "Legal Entity" shall mean the union of the acting entity and all
 *       other entities that control, are controlled by, or are under common
 *       control with that entity. For the purposes of this definition,
 *       "control" means (i) the power, direct or indirect, to cause the
 *       direction or management of such entity, whether by contract or
 *       otherwise, or (ii) ownership of fifty percent (50%) or more of the
 *       outstanding shares, or (iii) beneficial ownership of such entity.
 * 
 *       "You" (or "Your") shall mean an individual or Legal Entity
 *       exercising permissions granted by this License.
 * 
 *       "Source" form shall mean the preferred form for making modifications,
 *       including but not limited to software source code, documentation
 *       source, and configuration files.
 * 
 *       "Object" form shall mean any form resulting from mechanical
 *       transformation or translation of a Source form, including but
 *       not limited to compiled object code, generated documentation,
 *       and conversions to other media types.
 * 
 *       "Work" shall mean the work of authorship, whether in Source or
 *       Object form, made available under the License, as indicated by a
 *       copyright notice that is included in or attached to the work
 *       (an example is provided in the Appendix below).
 * 
 *       "Derivative Works" shall mean any work, whether in Source or Object
 *       form, that is based on (or derived from) the Work and for which the
 *       editorial revisions, annotations, elaborations, or other modifications
 *       represent, as a whole, an original work of authorship. For the purposes
 *       of this License, Derivative Works shall not include works that remain
 *       separable from, or merely link (or bind by name) to the interfaces of,
 *       the Work and Derivative Works thereof.
 * 
 *       "Contribution" shall mean any work of authorship, including
 *       the original version of the Work and any modifications or additions
 *       to that Work or Derivative Works thereof, that is intentionally
 *       submitted to Licensor for inclusion in the Work by the copyright owner
 *       or by an individual or Legal Entity authorized to submit on behalf of
 *       the copyright owner. For the purposes of this definition, "submitted"
 *       means any form of electronic, verbal, or written communication sent
 *       to the Licensor or its representatives, including but not limited to
 *       communication on electronic mailing lists, source code control systems,
 *       and issue tracking systems that are managed by, or on behalf of, the
 *       Licensor for the purpose of discussing and improving the Work, but
 *       excluding communication that is conspicuously marked or otherwise
 *       designated in writing by the copyright owner as "Not a Contribution."
 * 
 *       "Contributor" shall mean Licensor and any individual or Legal Entity
 *       on behalf of whom a Contribution has been received by Licensor and
 *       subsequently incorporated within the Work.
 * 
 *    2. Grant of Copyright License. Subject to the terms and conditions of
 *       this License, each Contributor hereby grants to You a perpetual,
 *       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
 *       copyright license to reproduce, prepare Derivative Works of,
 *       publicly display, publicly perform, sublicense, and distribute the
 *       Work and such Derivative Works in Source or Object form.
 * 
 *    3. Grant of Patent License. Subject to the terms and conditions of
 *       this License, each Contributor hereby grants to You a perpetual,
 *       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
 *       (except as stated in this section) patent license to make, have made,
 *       use, offer to sell, sell, import, and otherwise transfer the Work,
 *       where such license applies only to those patent claims licensable
 *       by such Contributor that are necessarily infringed by their
 *       Contribution(s) alone or by combination of their Contribution(s)
 *       with the Work to which such Contribution(s) was submitted. If You
 *       institute patent litigation against any entity (including a
 *       cross-claim or counterclaim in a lawsuit) alleging that the Work
 *       or a Contribution incorporated within the Work constitutes direct
 *       or contributory patent infringement, then any patent licenses
 *       granted to You under this License for that Work shall terminate
 *       as of the date such litigation is filed.
 * 
 *    4. Redistribution. You may reproduce and distribute copies of the
 *       Work or Derivative Works thereof in any medium, with or without
 *       modifications, and in Source or Object form, provided that You
 *       meet the following conditions:
 * 
 *       (a) You must give any other recipients of the Work or
 *           Derivative Works a copy of this License; and
 * 
 *       (b) You must cause any modified files to carry prominent notices
 *           stating that You changed the files; and
 * 
 *       (c) You must retain, in the Source form of any Derivative Works
 *           that You distribute, all copyright, patent, trademark, and
 *           attribution notices from the Source form of the Work,
 *           excluding those notices that do not pertain to any part of
 *           the Derivative Works; and
 * 
 *       (d) If the Work includes a "NOTICE" text file as part of its
 *           distribution, then any Derivative Works that You distribute must
 *           include a readable copy of the attribution notices contained
 *           within such NOTICE file, excluding those notices that do not
 *           pertain to any part of the Derivative Works, in at least one
 *           of the following places: within a NOTICE text file distributed
 *           as part of the Derivative Works; within the Source form or
 *           documentation, if provided along with the Derivative Works; or,
 *           within a display generated by the Derivative Works, if and
 *           wherever such third-party notices normally appear. The contents
 *           of the NOTICE file are for informational purposes only and
 *           do not modify the License. You may add Your own attribution
 *           notices within Derivative Works that You distribute, alongside
 *           or as an addendum to the NOTICE text from the Work, provided
 *           that such additional attribution notices cannot be construed
 *           as modifying the License.
 * 
 *       You may add Your own copyright statement to Your modifications and
 *       may provide additional or different license terms and conditions
 *       for use, reproduction, or distribution of Your modifications, or
 *       for any such Derivative Works as a whole, provided Your use,
 *       reproduction, and distribution of the Work otherwise complies with
 *       the conditions stated in this License.
 * 
 *    5. Submission of Contributions. Unless You explicitly state otherwise,
 *       any Contribution intentionally submitted for inclusion in the Work
 *       by You to the Licensor shall be under the terms and conditions of
 *       this License, without any additional terms or conditions.
 *       Notwithstanding the above, nothing herein shall supersede or modify
 *       the terms of any separate license agreement you may have executed
 *       with Licensor regarding such Contributions.
 * 
 *    6. Trademarks. This License does not grant permission to use the trade
 *       names, trademarks, service marks, or product names of the Licensor,
 *       except as required for reasonable and customary use in describing the
 *       origin of the Work and reproducing the content of the NOTICE file.
 * 
 *    7. Disclaimer of Warranty. Unless required by applicable law or
 *       agreed to in writing, Licensor provides the Work (and each
 *       Contributor provides its Contributions) on an "AS IS" BASIS,
 *       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 *       implied, including, without limitation, any warranties or conditions
 *       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
 *       PARTICULAR PURPOSE. You are solely responsible for determining the
 *       appropriateness of using or redistributing the Work and assume any
 *       risks associated with Your exercise of permissions under this License.
 * 
 *    8. Limitation of Liability. In no event and under no legal theory,
 *       whether in tort (including negligence), contract, or otherwise,
 *       unless required by applicable law (such as deliberate and grossly
 *       negligent acts) or agreed to in writing, shall any Contributor be
 *       liable to You for damages, including any direct, indirect, special,
 *       incidental, or consequential damages of any character arising as a
 *       result of this License or out of the use or inability to use the
 *       Work (including but not limited to damages for loss of goodwill,
 *       work stoppage, computer failure or malfunction, or any and all
 *       other commercial damages or losses), even if such Contributor
 *       has been advised of the possibility of such damages.
 * 
 *    9. Accepting Warranty or Additional Liability. While redistributing
 *       the Work or Derivative Works thereof, You may choose to offer,
 *       and charge a fee for, acceptance of support, warranty, indemnity,
 *       or other liability obligations and/or rights consistent with this
 *       License. However, in accepting such obligations, You may act only
 *       on Your own behalf and on Your sole responsibility, not on behalf
 *       of any other Contributor, and only if You agree to indemnify,
 *       defend, and hold each Contributor harmless for any liability
 *       incurred by, or claims asserted against, such Contributor by reason
 *       of your accepting any such warranty or additional liability.
 * 
 *    END OF TERMS AND CONDITIONS
 * 
 *    APPENDIX: How to apply the Apache License to your work.
 * 
 *       To apply the Apache License to your work, attach the following
 *       boilerplate notice, with the fields enclosed by brackets "[]"
 *       replaced with your own identifying information. (Don't include
 *       the brackets!)  The text should be enclosed in the appropriate
 *       comment syntax for the file format. We also recommend that a
 *       file or class name and description of purpose be included on the
 *       same "printed page" as the copyright notice for easier
 *       identification within third-party archives.
 * 
 *    Copyright 2024 DIGITAL TECHNOLOGY LLC
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 * 
 */
import { __classPrivateFieldGet } from 'tslib';
import * as pdf from '@trusted-pdf/pdf';
import { PdfFlags } from '@trusted-pdf/pdf';

class PdfSigFlags extends PdfFlags {
    constructor(options) {
        super(SigFlags, options);
    }
}
var SigFlags;
(function (SigFlags) {
    SigFlags[SigFlags["SignaturesExist"] = 1] = "SignaturesExist";
    SigFlags[SigFlags["AppendOnly"] = 2] = "AppendOnly";
})(SigFlags || (SigFlags = {}));

class Signature {
    constructor(dict, name) {
        this.dict = dict;
        this.name = name;
    }
    get visibility() {
        const f = this.dict.find(pdf.Names.F, pdf.PdfNumber);
        if (f) {
            const flags = this.dict.doc.createFlags(pdf.PdfAnnotFlags, f.value).get();
            if (flags.includes(pdf.AnnotFlagsName.Hidden)
                || flags.includes(pdf.AnnotFlagsName.Invisible)
                || flags.includes(pdf.AnnotFlagsName.NoView)
                || flags.includes(pdf.AnnotFlagsName.ToggleNoView)) {
                return false;
            }
        }
        const rect = this.dict.get(pdf.Names.Rect, pdf.PdfArray);
        for (const coordinate of rect) {
            if (coordinate instanceof pdf.PdfNumber && coordinate.value != 0) {
                return true;
            }
        }
        return false;
    }
    get pageNumber() {
        const p = this.dict.get(pdf.Names.P, pdf.PdfDictionary);
        if (!p.parent || !(p.parent instanceof pdf.PdfIndirectObject)) {
            throw new Error("Невозможно получить ID страницы");
        }
        const pID = p.parent.id;
        const list = this.dict.doc.getPagesList();
        const pageNumber = [...list.keys()].find((key) => {
            const dictionary = list.get(key);
            if (!dictionary) {
                throw new Error("Неверный ключ страницы");
            }
            if (!dictionary.parent || !(dictionary.parent instanceof pdf.PdfIndirectObject)) {
                throw new Error("Страница без ID");
            }
            return dictionary.parent.id === pID;
        });
        if (!pageNumber) {
            throw new Error("Страница не найдена");
        }
        return pageNumber;
    }
    set trustedParams(value) {
        if (value) {
            this.dict.set(pdf.Names.TrustedParams, this.dict.doc.createLiteral(value));
        }
    }
    get trustedParams() {
        const params = this.dict.find(pdf.Names.TrustedParams, pdf.PdfLiteralString);
        if (params) {
            return params.value;
        }
        return params;
    }
    async sign(options) {
        var _a;
        const doc = this.dict.doc;
        doc.save();
        if (this.dict.find(pdf.Names.V)) {
            throw new Error(`Sign(): Сигнатура '${this.name}' уже подписана`);
        }
        const catalog = doc.xref.trailer.Root;
        const acroForm = catalog.findOrSet(pdf.Names.AcroForm, pdf.PdfDictionary, true);
        let flags = acroForm.find(pdf.Names.SigFlags, PdfSigFlags);
        if (!flags) {
            flags = doc.createFlags(PdfSigFlags);
            acroForm.set(pdf.Names.SigFlags, flags);
        }
        flags.set("SignaturesExist");
        flags.set("AppendOnly");
        const count = String(doc.buffer.length).length;
        const padding = count > 10 ? count + 2 : 10;
        const indexByteRange1 = doc.createNumber(0);
        const indexByteRange2 = doc.createNumber(0);
        indexByteRange2.padding = padding;
        const indexByteRange3 = doc.createNumber(0);
        indexByteRange3.padding = padding;
        const indexByteRange4 = doc.createNumber(0);
        indexByteRange4.padding = padding;
        const contents = doc.createHexString(new Uint8Array(options.contentLength));
        this.dict.set(pdf.Names.V, doc.createDictionary({
            Type: doc.createName(pdf.Names.Sig),
            Filter: doc.createName(pdf.Names.AdobePPKLite),
            SubFilter: doc.createName(pdf.Names.EtsiCadesDetached),
            Contents: contents,
            ByteRange: doc.createArray(indexByteRange1, indexByteRange2, indexByteRange3, indexByteRange4),
            M: doc.createLiteral(doc.createFormattedDateTime()),
        }).ref());
        await ((_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options));
        doc.save();
        indexByteRange2.reWriteValue(contents.raw.offset);
        const indexOfEndContent = contents.raw.offset + contents.raw.length;
        indexByteRange3.reWriteValue(indexOfEndContent);
        indexByteRange4.reWriteValue(doc.buffer.length - indexOfEndContent);
        const raw1 = doc.buffer.subarray(indexByteRange1.value, indexByteRange1.value + indexByteRange2.value).getRaw();
        const raw2 = doc.buffer.subarray(indexByteRange3.value, indexByteRange3.value + indexByteRange4.value).getRaw();
        const rawContent = new Uint8Array(raw1.length + raw2.length);
        rawContent.set(raw1);
        rawContent.set(raw2, raw1.length);
        const cms = await options.onSign(rawContent);
        const newCms = new Uint8Array((contents.raw.length - 2) / 2);
        newCms.set(cms, 0);
        contents.reWriteValue(newCms);
    }
    async verify(options) {
        const res = {
            verifyCallBack: false,
        };
        const doc = this.dict.doc;
        const v = this.dict.get(pdf.Names.V, pdf.PdfDictionary);
        const byteRange = v.get(pdf.Names.ByteRange, pdf.PdfArray);
        const indexByteRange1 = byteRange.get(0, pdf.PdfNumber).value;
        const indexByteRange2 = byteRange.get(1, pdf.PdfNumber).value;
        const indexByteRange3 = byteRange.get(2, pdf.PdfNumber).value;
        const indexByteRange4 = byteRange.get(3, pdf.PdfNumber).value;
        const raw1 = doc.buffer.subarray(indexByteRange1, indexByteRange1 + indexByteRange2).getRaw();
        const raw2 = doc.buffer.subarray(indexByteRange3, indexByteRange3 + indexByteRange4).getRaw();
        const rawContent = new Uint8Array(raw1.length + raw2.length);
        rawContent.set(raw1);
        rawContent.set(raw2, raw1.length);
        const sign = v.get(pdf.Names.Contents, pdf.PdfHexString).toBinary();
        res.verifyCallBack = await options.onVerify(rawContent, sign);
        return res;
    }
}

var _Sign_signatures;
class Sign {
    constructor(doc) {
        this.doc = doc;
        _Sign_signatures.set(this, new Map());
        this.findSignaturesInDocument();
    }
    verifyAttestation() {
        let status = true;
        const log = [];
        const listXref = [this.doc.xref];
        let current = this.doc.xref;
        while (true) {
            if (!current.prev) {
                break;
            }
            listXref.push(current.prev);
            current = current.prev;
        }
        listXref.reverse();
        const listPagesAndContents = [];
        const listWidgets = new Map();
        let find = false;
        for (const xref of listXref) {
            if (find) {
                for (const [key, obj] of xref.objects) {
                    if (listPagesAndContents.includes(key)) {
                        status = false;
                        log.push(`Объект ${key} был изменен`);
                    }
                    const oldRect = listWidgets.get(key);
                    if (oldRect) {
                        if (!(obj.value instanceof pdf.PdfDictionary)) {
                            log.push(`Виджет ${key} перестал быть Dictionary`);
                            status = false;
                            return { status, log };
                        }
                        const subtype = obj.value.find(pdf.Names.Subtype, pdf.PdfName);
                        if (!subtype || subtype.value !== pdf.Names.Widget) {
                            log.push(`Виджет ${key} перестал быть Widget`);
                            status = false;
                            return { status, log };
                        }
                        const newRect = this.getRect(obj.value);
                        if (oldRect.toString() !== newRect.toString()) {
                            log.push(`Виджет ${key} изменил rect ${oldRect} на rect ${newRect}`);
                            status = false;
                            return { status, log };
                        }
                    }
                }
            }
            if (!find) {
                for (const [key, obj] of xref.objects) {
                    const value = obj.getValue(xref);
                    if (value instanceof pdf.PdfDictionary) {
                        const type = value.find(pdf.Names.Type, pdf.PdfName);
                        if (type) {
                            if (type.value === pdf.Names.Pages) {
                                listPagesAndContents.push(key);
                                continue;
                            }
                            if (type.value === pdf.Names.Page) {
                                listPagesAndContents.push(key);
                                this.findWidgetsRectOnPage(xref, value, listWidgets);
                                const contents = value.find(pdf.Names.Contents);
                                if (contents && contents.parent && contents.parent instanceof pdf.PdfIndirectObject) {
                                    listPagesAndContents.push(contents.parent.id);
                                }
                                continue;
                            }
                            if (type.value.toLowerCase() === "sig") {
                                find = true;
                            }
                        }
                    }
                }
            }
        }
        if (!find) {
            status = false;
            log.push("Подписи не найдены");
        }
        return { status, log };
    }
    findWidgetsRectOnPage(xref, page, map) {
        const annots = page.find(pdf.Names.Annots, pdf.PdfArray);
        if (!annots) {
            return null;
        }
        if (!map) {
            map = new Map();
        }
        for (let index = 0; index < annots.length; index++) {
            const annot = annots.get(index, pdf.PdfDictionary);
            const subtype = annot.find(pdf.Names.Subtype, pdf.PdfName);
            if (!subtype || subtype.value !== pdf.Names.Widget) {
                break;
            }
            if (!annot.parent || !(annot.parent instanceof pdf.PdfIndirectObject)) {
                break;
            }
            const id = annot.parent.id;
            const history = xref.objects.get(id);
            if (!history || !(history.value instanceof pdf.PdfDictionary)) {
                throw new Error(`Невозможно получить аннотацию ${id} из обновления`);
            }
            const arr = this.getRect(history.value);
            map.set(id, arr);
        }
        if (!map.size) {
            return null;
        }
        return map;
    }
    getRect(obj) {
        const arr = new Array();
        const rect = obj.find(pdf.Names.Rect, pdf.PdfArray);
        if (!rect) {
            return arr;
        }
        for (let index = 0; index < rect.length; index++) {
            const element = rect.get(index, pdf.PdfNumber).value;
            arr.push(element);
        }
        return arr;
    }
    findSignaturesInDocument() {
        const catalog = this.doc.xref.trailer.Root;
        const acroForm = catalog.find(pdf.Names.AcroForm, pdf.PdfDictionary);
        if (!acroForm) {
            return;
        }
        const fields = acroForm.get(pdf.Names.Fields, pdf.PdfArray);
        for (let index = 0; index < fields.length; index++) {
            const dict = fields.get(index, pdf.PdfDictionary);
            const ft = dict.find(pdf.Names.FT, pdf.PdfName);
            if (!ft || ft.value !== pdf.Names.Sig) {
                continue;
            }
            const name = dict.get(pdf.Names.T, pdf.PdfString).value;
            __classPrivateFieldGet(this, _Sign_signatures, "f").set(name, new Signature(dict, name));
        }
    }
    getSignaturesList() {
        return __classPrivateFieldGet(this, _Sign_signatures, "f");
    }
    findSignature(key) {
        var _a, _b;
        if (typeof key === "string") {
            return (_a = __classPrivateFieldGet(this, _Sign_signatures, "f").get(key)) !== null && _a !== void 0 ? _a : null;
        }
        const keys = Array.from(__classPrivateFieldGet(this, _Sign_signatures, "f").keys());
        return (_b = __classPrivateFieldGet(this, _Sign_signatures, "f").get(keys[key])) !== null && _b !== void 0 ? _b : null;
    }
    getSignature(key) {
        const sig = this.findSignature(key);
        if (!sig) {
            throw new Error(`${key} signature не найдена`);
        }
        return sig;
    }
    addSignatures(...params) {
        if (!params.length) {
            throw new Error("addSignature(): должен содержать параметры");
        }
        const pages = this.doc.getPagesList();
        const list = new Map();
        for (const param of params) {
            const page = pages.get(param.page);
            if (!page) {
                throw new Error(`Страница ${param.page} не найдена`);
            }
            if (__classPrivateFieldGet(this, _Sign_signatures, "f").has(param.name)) {
                throw new Error(`Сигнатура с имененем ${param.name}, не найдена`);
            }
            const sigDict = this.addSignatureOnPage(page, param.name, Object.assign({}, Sign.DEFAULT_RECT, param.rectangle), param.stream);
            const sig = new Signature(sigDict, param.name);
            if (param.trustedParams) {
                sig.trustedParams = param.trustedParams;
            }
            __classPrivateFieldGet(this, _Sign_signatures, "f").set(param.name, sig);
            list.set(param.name, sig);
        }
        return list;
    }
    addSignatureOnPage(page, name, rectangle, stream = new Uint8Array()) {
        const catalog = this.doc.xref.trailer.Root;
        let sigName = name.trim();
        if (sigName === "") {
            sigName = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
                const r = Math.random() * 16 | 0;
                const v = c === "x" ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        const sig = this.doc.createDictionary({
            FT: this.doc.createName(pdf.Names.Sig),
            T: this.doc.createLiteral(sigName),
            F: this.doc.createNumber(4),
            Type: this.doc.createName(pdf.Names.Annot),
            Subtype: this.doc.createName(pdf.Names.Widget),
            P: page.ref(),
            Rect: this.doc.createArray(this.doc.createNumber(rectangle.x), this.doc.createNumber(rectangle.y), this.doc.createNumber(rectangle.x + rectangle.width), this.doc.createNumber(rectangle.y + rectangle.height)),
        });
        if (rectangle.height || rectangle.width) {
            sig.set(pdf.Names.AP, this.doc.createDictionary({
                N: this.doc.createStream({
                    dict: {
                        Type: this.doc.createName(pdf.Names.XObject),
                        Subtype: this.doc.createName(pdf.Names.Form),
                        BBox: this.doc.createArray(this.doc.createNumber(0), this.doc.createNumber(0), this.doc.createNumber(rectangle.width), this.doc.createNumber(rectangle.height)),
                        FormType: this.doc.createNumber(1),
                        Resources: this.doc.createDictionary(),
                    },
                    stream: stream,
                }).ref(),
            }));
        }
        page
            .findOrSet(pdf.Names.Annots, pdf.PdfArray)
            .push(sig.ref());
        const acroForm = catalog.findOrSet(pdf.Names.AcroForm, pdf.PdfDictionary, true);
        acroForm.findOrSet(pdf.Names.Fields, pdf.PdfArray).push(sig.ref());
        let sigFlags = acroForm.find(pdf.Names.SigFlags, PdfSigFlags);
        if (!sigFlags) {
            sigFlags = this.doc.createFlags(PdfSigFlags);
            acroForm.set(pdf.Names.SigFlags, sigFlags);
        }
        sigFlags.set("SignaturesExist");
        return sig;
    }
}
_Sign_signatures = new WeakMap();
Sign.DEFAULT_RECT = { x: 0, y: 0, height: 0, width: 0 };

export { PdfSigFlags, SigFlags, Sign, Signature };
